"use strict";(self.webpackChunkcode_confluence_docs=self.webpackChunkcode_confluence_docs||[]).push([[77],{4763:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"deep-dive/roadmap","title":"Product Roadmap","description":"\ud83d\uddfa\ufe0f Current roadmap and development status of Code Confluence","source":"@site/docs/deep-dive/roadmap.mdx","sourceDirName":"deep-dive","slug":"/deep-dive/roadmap","permalink":"/deep-dive/roadmap","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deep-dive/roadmap.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"\ud83d\uddfa\ufe0f Current roadmap and development status of Code Confluence"},"sidebar":"tutorialSidebar","previous":{"title":"Code Confluence Introduction","permalink":"/category/code-confluence-introduction"},"next":{"title":"Vision: The Universal Code Context Engine","permalink":"/deep-dive/vision"}}');var r=i(4848),t=i(8453);const o={sidebar_position:1,description:"\ud83d\uddfa\ufe0f Current roadmap and development status of Code Confluence"},d="Product Roadmap",a={},c=[{value:"\ud83c\udfaf Vision &amp; Mission",id:"-vision--mission",level:2},{value:"\ud83d\udcca Progress Overview",id:"-progress-overview",level:2},{value:"\ud83d\udd27 Context Engineering",id:"-context-engineering",level:2},{value:"Code Grammar Support for Programming Languages",id:"code-grammar-support-for-programming-languages",level:3},{value:"\u2705 <strong>Done</strong>",id:"-done",level:4},{value:"\ud83d\udd0d Discovery, Ingestion &amp; Synchronization",id:"-discovery-ingestion--synchronization",level:2},{value:"\ud83c\udfaf <strong>Core Capabilities</strong>",id:"-core-capabilities",level:3},{value:"\u2705 <strong>GitHub Native Integration</strong>",id:"-github-native-integration",level:3},{value:"\u2705 <strong>Local Git Repository Support</strong>",id:"-local-git-repository-support",level:3},{value:"\ud83e\udd16 AGENTS.md Initiative",id:"-agentsmd-initiative",level:2},{value:"\ud83d\ude80 <strong>Current Focus</strong>",id:"-current-focus",level:3}];function l(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"product-roadmap",children:"Product Roadmap"})}),"\n",(0,r.jsx)(n.h2,{id:"-vision--mission",children:"\ud83c\udfaf Vision & Mission"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Vision"}),": Platform for code understanding, maintainability and collaboration through autonomous intelligence."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mission"}),": Enable AI agents to understand and act on codebases with precision and efficiency."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-progress-overview",children:"\ud83d\udcca Progress Overview"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature Category"}),(0,r.jsx)(n.th,{children:"Status"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Context Engineering (Python)"}),(0,r.jsx)(n.td,{children:"\u2705 Stable"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Discovery & Ingestion"}),(0,r.jsx)(n.td,{children:"\u2705 Production Ready"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"AGENTS.md Framework"}),(0,r.jsx)(n.td,{children:"\ud83d\ude80 Active Development"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-context-engineering",children:"\ud83d\udd27 Context Engineering"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Building the foundation for intelligent code understanding"})}),"\n",(0,r.jsx)(n.h3,{id:"code-grammar-support-for-programming-languages",children:"Code Grammar Support for Programming Languages"}),"\n",(0,r.jsx)(n.p,{children:"Our advanced parsing engine provides deep syntactic and semantic understanding across multiple programming languages."}),"\n",(0,r.jsxs)(n.h4,{id:"-done",children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Done"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Python Grammar"})," - Full syntax support with advanced AST parsing","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Complete language feature coverage"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.unoplat.io/contribution/custom-framework-schema",children:"Framework-specific Optimizations"})})," - Programming language independent framework support"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-discovery-ingestion--synchronization",children:"\ud83d\udd0d Discovery, Ingestion & Synchronization"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Seamlessly connect and sync your development ecosystem"})}),"\n",(0,r.jsxs)(n.h3,{id:"-core-capabilities",children:["\ud83c\udfaf ",(0,r.jsx)(n.strong,{children:"Core Capabilities"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Available across all integration types"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Auto Codebase Detection"})," - Comprehensive codebase scanning among mono repositories"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tree-sitter Based Language Feature Specific Ingestion"})," - Tree-sitter based code grammar extraction and graph ingestion"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"-github-native-integration",children:["\u2705 ",(0,r.jsx)(n.strong,{children:"GitHub Native Integration"})]}),"\n",(0,r.jsx)(n.p,{children:"Complete GitHub ecosystem integration for both open-source and private repositories."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Accomplished Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Discovery"})," - Automatic detection and cataloging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Manual Synchronization"})," - On-demand repository updates"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"-local-git-repository-support",children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Local Git Repository Support"})]}),"\n",(0,r.jsx)(n.p,{children:"Direct integration with local development environments for immediate code analysis."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Manual Near Real-time Sync"})," - Instant local repository updates"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-agentsmd-initiative",children:"\ud83e\udd16 AGENTS.md Initiative"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Building agents to make repositories AI-ready"})}),"\n",(0,r.jsxs)(n.h3,{id:"-current-focus",children:["\ud83d\ude80 ",(0,r.jsx)(n.strong,{children:"Current Focus"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Active Development"})}),"\n",(0,r.jsx)(n.p,{children:"Building first set of agents to automatically initialize and maintain AGENTS.md files for repositories."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Enable AI coding assistants to better understand and work with any codebase by providing standardized context."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Milestone"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/unoplat/unoplat-code-confluence/issues/722",children:"Code Confluence v1 (Issue #722)"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Agent Capabilities"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Analysis"})," - Analyze repository structure and generate initial AGENTS.md"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context Extraction"})," - Extract build commands, test procedures, and coding standards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern Recognition"})," - Identify project-specific patterns and conventions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintenance"})," - Maintain and update AGENTS.md as codebase evolves"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AI Assistant Integration"})," - Provide context for AI coding assistants to work effectively"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var s=i(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);