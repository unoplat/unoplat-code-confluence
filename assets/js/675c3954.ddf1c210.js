"use strict";(self.webpackChunkcode_confluence_docs=self.webpackChunkcode_confluence_docs||[]).push([[53],{6410:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"deep-dive/vision","title":"Vision: The Universal Code Context Engine","description":"\ud83c\udfaf Our mission and vision for Unoplat Code Confluence","source":"@site/docs/deep-dive/vision.mdx","sourceDirName":"deep-dive","slug":"/deep-dive/vision","permalink":"/deep-dive/vision","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deep-dive/vision.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"\ud83c\udfaf Our mission and vision for Unoplat Code Confluence"},"sidebar":"tutorialSidebar","previous":{"title":"Product Roadmap","permalink":"/deep-dive/roadmap"},"next":{"title":"How it works","permalink":"/deep-dive/how-it-works"}}');var o=i(4848),r=i(8453);const t={sidebar_position:1,description:"\ud83c\udfaf Our mission and vision for Unoplat Code Confluence"},l="Vision: The Universal Code Context Engine",a={},c=[{value:"\ud83c\udfaf Our Mission",id:"-our-mission",level:2},{value:"\ud83c\udf1f Why Unoplat Code Confluence?",id:"-why-unoplat-code-confluence",level:2},{value:"Core Principles",id:"core-principles",level:3},{value:"\ud83d\ude80 Use Cases",id:"-use-cases",level:2},{value:"In Progress",id:"in-progress",level:3},{value:"Planned",id:"planned",level:3},{value:"\ud83d\udccb Alpha Disclaimer",id:"-alpha-disclaimer",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"vision-the-universal-code-context-engine",children:"Vision: The Universal Code Context Engine"})}),"\n",(0,o.jsx)(n.h2,{id:"-our-mission",children:"\ud83c\udfaf Our Mission"}),"\n",(0,o.jsx)(n.p,{children:"Unoplat Code Confluence aims to be the definitive solution for discovery, ingestion, and understanding of code across repositories. We believe that combining deterministic code grammar with state-of-the-art LLM pipelines can unlock a wide range of usecases around code understanding, maintainability and collaboration."}),"\n",(0,o.jsx)(n.h2,{id:"-why-unoplat-code-confluence",children:"\ud83c\udf1f Why Unoplat Code Confluence?"}),"\n",(0,o.jsx)(n.h3,{id:"core-principles",children:"Core Principles"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Precision First"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://github.com/unoplat/unoplat-code-confluence/tree/main/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/src/code_confluence_flow_bridge/parser/queries",children:"Extensible Language Support"})}),": Modular Tree-sitter based grammar extraction delivers consistent, accurate code context across all programming languages"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://docs.unoplat.io/contribution/custom-framework-schema",children:"Extensible Framework-Aware Parsing"})}),": Specialized grammar engines recognize framework and library-specific patterns based on project dependencies, ensuring contextually relevant code understanding"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Context Engineering"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complete Context Graph"}),": All essential context\u2014internal/external dependencies, inbound/outbound interfaces, domain models (entities/events), data stores, and service-to-service links\u2014kept fresh via workflow-based ingestion into the Graph."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Selective Context Routing & Hierarchical Decomposition"}),": Route only what matters and break work into scoped steps to boost accuracy and efficiency across tasks."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Enterprise-Grade Reliability"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Scalable and reliable processing and llm analysis powered by workflow orchestrator."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Performance as a First-Class Citizen"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Optimized algorithms across all aspects of discovery , detection , ingestion and llm based insights."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"-use-cases",children:"\ud83d\ude80 Use Cases"}),"\n",(0,o.jsx)(n.h3,{id:"in-progress",children:"In Progress"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"AGENTS.md-first Context"}),": Auto-generate machine-readable AGENTS.md per repo and an org index, giving any coding agent a precise source of truth."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"planned",children:"Planned"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Application Overview"}),": Comprehensive understanding of application architecture, dependencies, and relationships through graph-based exploration."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-alpha-disclaimer",children:"\ud83d\udccb Alpha Disclaimer"}),"\n",(0,o.jsx)(n.p,{children:"We would want to be transparent about our current state. While we're deeply committed to our core principles and have invested significant engineering effort to uphold them, Unoplat Code Confluence is currently in alpha. Despite our best intentions and rigorous development practices, there may be areas where we haven't fully achieved these principles yet."}),"\n",(0,o.jsx)(n.p,{children:"If you encounter any gaps between our stated vision and the current implementation, or if you have suggestions for improvement, please don't hesitate to engage with us:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Report Issues"}),": ",(0,o.jsx)(n.a,{href:"https://github.com/unoplat/unoplat-code-confluence/issues",children:"GitHub Issues"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Start Discussions"}),": ",(0,o.jsx)(n.a,{href:"https://github.com/unoplat/unoplat-code-confluence/discussions",children:"GitHub Discussions"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Your feedback is invaluable as we work toward production readiness and helps us prioritize our roadmap to better serve the developer community."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Ready to get started? Check out our ",(0,o.jsx)(n.a,{href:"/",children:"Quick Start Guide"})," to begin your journey with Unoplat Code Confluence."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(6540);const o={},r=s.createContext(o);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);