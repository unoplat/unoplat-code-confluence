"use strict";(self.webpackChunkcode_confluence=self.webpackChunkcode_confluence||[]).push([[270],{4555:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var o=i(4848),r=i(8453);const t={sidebar_position:2},s="Quick Start Guide",l={id:"quickstart/how-to-run",title:"Quick Start Guide",description:"Welcome to Unoplat Code Confluence",source:"@site/docs/quickstart/how-to-run.md",sourceDirName:"quickstart",slug:"/quickstart/how-to-run",permalink:"/unoplat-code-confluence/docs/quickstart/how-to-run",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart/how-to-run.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/unoplat-code-confluence/docs/category/quickstart"},next:{title:"Unoplat-oss-atlas",permalink:"/unoplat-code-confluence/docs/category/unoplat-oss-atlas"}},a={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Codebase Requirements",id:"codebase-requirements",level:3},{value:"1. ruff.toml",id:"1-rufftoml",level:4},{value:"2. Isort Configuration (.isort.cfg)",id:"2-isort-configuration-isortcfg",level:4},{value:"Installation Requirements",id:"installation-requirements",level:3},{value:"Installation",id:"installation",level:2},{value:"1. Python Setup",id:"1-python-setup",level:3},{value:"2. Install Unoplat Code Confluence",id:"2-install-unoplat-code-confluence",level:3},{value:"Configuration",id:"configuration",level:2},{value:"JSON Configuration",id:"json-configuration",level:3},{value:"Configuration Fields",id:"configuration-fields",level:4},{value:"Example Configuration",id:"example-configuration",level:4},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Running the Application",id:"running-the-application",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,o.jsxs)(n.p,{children:["Welcome to ",(0,o.jsx)(n.strong,{children:"Unoplat Code Confluence"})]}),"\n",(0,o.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#installation",children:"Installation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Unoplat Code Confluence"})," currently supports python codebases. It is currently in alpha stage and we are working on adding support for more codebases and features. The current version supports parsing codebases and exporting a json representation of code graph. For more details on upcoming features, vision, deep dive please check out ",(0,o.jsx)(n.a,{href:"/docs/deep-dive/vision",children:"vision"}),", ",(0,o.jsx)(n.a,{href:"/docs/deep-dive/roadmap",children:"roadmap"})," and ",(0,o.jsx)(n.a,{href:"/docs/deep-dive/how-it-works",children:"How-It-Works"})," respectively."]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"codebase-requirements",children:"Codebase Requirements"}),"\n",(0,o.jsxs)(n.p,{children:["Currently unoplat code confluence supports python codebases till 3.11 (due to dependency on isort). To support features like segregating imports and figuring out internal dependencies code confluence relies on ",(0,o.jsx)(n.a,{href:"https://docs.astral.sh/ruff/",children:"ruff"})," and ",(0,o.jsx)(n.a,{href:"https://pycqa.github.io/isort/",children:"isort"})," ecosystem."]}),"\n",(0,o.jsx)(n.p,{children:"Here are the configurations that are required to be set in codebase:"}),"\n",(0,o.jsx)(n.h4,{id:"1-rufftoml",children:"1. ruff.toml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'target-version = "py311"\n\nexclude = [\n    ".git",\n    ".mypy_cache",\n    ".pytest_cache",\n    ".ruff_cache",\n    ".venv",\n    "venv",\n    "build",\n    "dist",\n]\n\nsrc = ["unoplat_code_confluence"]  # Adjust this to your project\'s source directory\nline-length = 320\n\n[lint]\n# Enable only flake8-tidy-imports\nselect = ["I","E402","INP001","TID","F401","F841"]\n\n[lint.per-file-ignores]\n"__init__.py" = ["E402","F401"]\n\n[lint.flake8-tidy-imports]\nban-relative-imports = "all"\n\n[lint.isort]\ncombine-as-imports = true\nforce-to-top = ["os","sys"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then run ruff on cli with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ruff check --fix . --unsafe-fixes\n"})}),"\n",(0,o.jsx)(n.h4,{id:"2-isort-configuration-isortcfg",children:"2. Isort Configuration (.isort.cfg)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:'[settings]\nknown_third_party = "Include third party dependencies here"\nimport_heading_stdlib = Standard Library\nimport_heading_thirdparty = Third Party\nimport_heading_firstparty = First Party\nimport_heading_localfolder = Local \npy_version = 311  # For Python 3.12\nline_length = 500\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then run isort on cli with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"isort . --python-version 311\n"})}),"\n",(0,o.jsx)(n.h3,{id:"installation-requirements",children:"Installation Requirements"}),"\n",(0,o.jsx)(n.p,{children:"Before you begin, ensure you have the following installed on your system:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/pyenv/pyenv",children:"PyEnv"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/pypa/pipx",children:"Pipx"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://python-poetry.org/",children:"Poetry"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pipx install poetry\n"})}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.h3,{id:"1-python-setup",children:"1. Python Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pyenv install 3.12.1\npyenv global 3.12.1\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-install-unoplat-code-confluence",children:"2. Install Unoplat Code Confluence"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pipx install --python $(pyenv which python) 'git+https://github.com/unoplat/unoplat-code-confluence.git@unoplat-code-confluence-v0.17.0#subdirectory=unoplat-code-confluence'\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"json-configuration",children:"JSON Configuration"}),"\n",(0,o.jsx)(n.h4,{id:"configuration-fields",children:"Configuration Fields"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"repositories"})," (Required): Array of repositories to analyze"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"git_url"}),": URL of the Git repository"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"output_path"}),": Local directory where analysis results will be stored"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"codebases"}),": Array of codebases within the repository","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"codebase_folder_name"}),": Name of the folder containing the codebase"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"root_package_name"}),": Root package name (optional for some languages)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"programming_language_metadata"}),": Language-specific configuration","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"language"}),': Programming language (currently supports "python")']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"package_manager"}),': Package manager type ("poetry" or "pip")']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"language_version"}),": Version of the programming language"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"archguard"})," (Required): Configuration for ArchGuard tool"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"download_url"}),": URL to download ArchGuard from"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"download_directory"}),": Local directory to store ArchGuard"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"logging_handlers"})," (Required): Array of logging configurations"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sink"}),": Log file path"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"format"}),": Log message format"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rotation"}),": Log file rotation size"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"retention"}),": Log retention period"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"level"}),": Logging level"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "repositories": [\n    {\n      "git_url": "https://github.com/unoplat/unoplat-code-confluence",\n      "output_path": "/Users/jayghiya/Documents/unoplat",\n      "codebases": [\n        {\n          "codebase_folder_name": "unoplat-code-confluence",\n          "root_package_name": "unoplat_code_confluence",\n          "programming_language_metadata": {\n            "language": "python",\n            "package_manager": "poetry",\n            "language_version": "3.12.0"\n          }        \n        }\n      ]\n    }\n  ],\n  "archguard": {\n    "download_url": "archguard/archguard",\n    "download_directory": "/Users/jayghiya/Documents/unoplat"\n  },\n  "logging_handlers": [\n    {\n      "sink": "~/Documents/unoplat/app.log",\n      "format": "<green>{time:YYYY-MM-DD at HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | <magenta>{thread.name}</magenta> - <level>{message}</level>",\n      "rotation": "10 MB",\n      "retention": "10 days",\n      "level": "DEBUG"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsxs)(n.p,{children:["Create a ",(0,o.jsx)(n.code,{children:".env.dev"})," file where you intend to run the project:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-env",children:"UNOPLAT_ENV=dev\nUNOPLAT_DEBUG=true \nUNOPLAT_GITHUB_TOKEN=Your_Github_Pat_Token\n"})}),"\n",(0,o.jsx)(n.h3,{id:"running-the-application",children:"Running the Application"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"unoplat-code-confluence --config /path/to/your/config.json\n"})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var o=i(6540);const r={},t=o.createContext(r);function s(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);