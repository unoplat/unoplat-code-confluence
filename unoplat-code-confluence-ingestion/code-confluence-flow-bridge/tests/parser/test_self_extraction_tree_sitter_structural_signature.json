{
  "module_docstring": "\nTree-sitter structural signature extractor for code parsing.\n\nThis module provides language-agnostic structural signature extraction using tree-sitter\nwith configurable queries for different programming languages.\n",
  "global_variables": [
    {
      "start_line": 30,
      "end_line": 30,
      "signature": "_LANGUAGE_CACHE: Dict[str, tree_sitter.Language] = {}"
    },
    {
      "start_line": 32,
      "end_line": 32,
      "signature": "_QUERY_CACHE: Dict[str, Dict[str, tree_sitter.Query]] = {}"
    },
    {
      "start_line": 31,
      "end_line": 31,
      "signature": "_PARSER_CACHE: Dict[str, tree_sitter.Parser] = {}"
    }
  ],
  "functions": [],
  "classes": [
    {
      "start_line": 35,
      "end_line": 788,
      "signature": "class TreeSitterStructuralSignatureExtractor:",
      "docstring": "Extracts structural signatures from source code using tree-sitter queries.",
      "vars": [
        {
          "start_line": 40,
          "end_line": 40,
          "signature": "self.config: LanguageConfig = get_config(language_name)"
        },
        {
          "start_line": 41,
          "end_line": 41,
          "signature": "self.language_name: str = language_name"
        },
        {
          "start_line": 42,
          "end_line": 42,
          "signature": "self.language: tree_sitter.Language = self._get_language(language_name)"
        },
        {
          "start_line": 43,
          "end_line": 43,
          "signature": "self.parser: tree_sitter.Parser = self._get_parser(language_name)"
        },
        {
          "start_line": 44,
          "end_line": 44,
          "signature": "self.queries: Dict[str, tree_sitter.Query] = self._get_compiled_queries()"
        }
      ],
      "methods": [
        {
          "start_line": 38,
          "end_line": 44,
          "signature": "def __init__(self, language_name: str = \"python\"):",
          "docstring": "Initialize parser & queries with multi-level caching and lazy compilation.",
          "function_calls": [
            "get_config(language_name)",
            "self._get_language(language_name)",
            "self._get_parser(language_name)",
            "self._get_compiled_queries()"
          ],
          "nested_functions": [],
          "instance_variables": [
            {
              "start_line": 40,
              "end_line": 40,
              "signature": "self.config: LanguageConfig = get_config(language_name)"
            },
            {
              "start_line": 41,
              "end_line": 41,
              "signature": "self.language_name: str = language_name"
            },
            {
              "start_line": 42,
              "end_line": 42,
              "signature": "self.language: tree_sitter.Language = self._get_language(language_name)"
            },
            {
              "start_line": 43,
              "end_line": 43,
              "signature": "self.parser: tree_sitter.Parser = self._get_parser(language_name)"
            },
            {
              "start_line": 44,
              "end_line": 44,
              "signature": "self.queries: Dict[str, tree_sitter.Query] = self._get_compiled_queries()"
            }
          ]
        },
        {
          "start_line": 46,
          "end_line": 51,
          "signature": "@staticmethod\n    def _get_language(language_name: str) -> tree_sitter.Language:",
          "docstring": "Fetch a tree-sitter Language with caching.",
          "function_calls": [
            "get_language(language_name)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 53,
          "end_line": 58,
          "signature": "@staticmethod\n    def _get_parser(language_name: str) -> tree_sitter.Parser:",
          "docstring": "Fetch a tree-sitter Parser with caching.",
          "function_calls": [
            "get_parser(language_name)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 60,
          "end_line": 67,
          "signature": "def _get_compiled_queries(self) -> Dict[str, tree_sitter.Query]:",
          "docstring": "Compile and cache queries for the current language on-demand.",
          "function_calls": [
            "self._create_queries()",
            "self.language.query(qstr)",
            "query_strings.items()"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 69,
          "end_line": 96,
          "signature": "def _create_queries(self) -> Dict[str, str]:",
          "docstring": "Return raw query strings keyed by a descriptive name.",
          "function_calls": [
            "query_file_map.items()",
            "file_path.exists()",
            "FileNotFoundError(f\"Query file not found: {file_path}\")",
            "file_path.read_text()"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 98,
          "end_line": 115,
          "signature": "def extract_structural_signature(self, source_bytes: bytes) -> StructuralSignature:",
          "docstring": "Extract structural signature from byte content.",
          "function_calls": [
            "self.parser.parse(source_bytes)",
            "self._extract_module_docstring(root_node, source_bytes)",
            "self._extract_global_variables(root_node, source_bytes)",
            "self._extract_functions(root_node, source_bytes)",
            "self._extract_classes(root_node, source_bytes)",
            "StructuralSignature(\n            module_docstring=module_docstring,\n            global_variables=global_variables,\n            functions=functions,\n            classes=classes\n        )"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 117,
          "end_line": 127,
          "signature": "def _extract_module_docstring(self, root_node: tree_sitter.Node, source: bytes) -> Optional[str]:",
          "docstring": "Extract module-level docstring.",
          "function_calls": [
            "self.queries['module_docstring'].captures(root_node)",
            "self.config.cap(\"module\")",
            "source[node.start_byte:node.end_byte].decode('utf-8')",
            "self._clean_string_literal(docstring)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 129,
          "end_line": 153,
          "signature": "def _extract_global_variables(self, root_node: tree_sitter.Node, source: bytes) -> List[VariableInfo]:",
          "docstring": "Extract module-level variable declarations.",
          "function_calls": [
            "self.queries['global_variables'].captures(root_node)",
            "set()",
            "self.config.cap(\"var_statement\")",
            "self._is_at_module_level(node)",
            "source[node.start_byte:node.end_byte].decode('utf-8').strip()",
            "source[node.start_byte:node.end_byte].decode('utf-8')",
            "seen_assignments.add((start_line, signature))",
            "variables.append(VariableInfo(\n                            start_line=start_line,\n                            end_line=end_line,\n                            signature=signature\n                        ))",
            "VariableInfo(\n                            start_line=start_line,\n                            end_line=end_line,\n                            signature=signature\n                        )"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 155,
          "end_line": 222,
          "signature": "def _extract_functions(self, root_node: tree_sitter.Node, source: bytes) -> List[FunctionInfo]:",
          "docstring": "Extract module-level function definitions using matches.",
          "function_calls": [
            "self.queries['module_functions'].matches(root_node)",
            "set()",
            "self.config.cap(\"func_with_decorators\")",
            "self._is_at_module_level(func_node)",
            "source[func_node.start_byte:func_node.end_byte].decode('utf-8')",
            "signature.split('\\n')",
            "sig_parts.append(line)",
            "line.rstrip()",
            "line.rstrip().endswith(':')",
            "self.config.cap(\"function\")",
            "self._clean_string_literal(\n                        source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')\n                    )",
            "source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')",
            "captures.get(function_node_cap, [None])",
            "self._extract_nested_functions_for_node(actual_func_def, source)",
            "self._extract_function_calls_for_node(actual_func_def, source)",
            "'\\n'.join(sig_parts)",
            "seen.add(key)",
            "functions.append(FunctionInfo(\n                        start_line=start_line,\n                        end_line=end_line,\n                        signature=func_sig,\n                        docstring=docstring,\n                        function_calls=function_calls,\n                        nested_functions=nested_functions\n                    ))",
            "FunctionInfo(\n                        start_line=start_line,\n                        end_line=end_line,\n                        signature=func_sig,\n                        docstring=docstring,\n                        function_calls=function_calls,\n                        nested_functions=nested_functions\n                    )",
            "sorted(functions, key=lambda f: f.start_line)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 224,
          "end_line": 300,
          "signature": "def _extract_classes(self, root_node: tree_sitter.Node, source: bytes) -> List[ClassInfo]:",
          "docstring": "Extract class definitions with their methods and variables using matches.",
          "function_calls": [
            "self.queries['module_classes'].matches(root_node)",
            "self.config.cap(\"class_with_decorators\")",
            "self.config.cap(\"class_def\")",
            "source[class_node.start_byte:class_node.end_byte].decode('utf-8')",
            "signature.split('\\n')",
            "sig_parts.append(line)",
            "line.rstrip()",
            "line.rstrip().endswith(':')",
            "self.config.cap(\"class\")",
            "self._clean_string_literal(\n                        source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')\n                    )",
            "source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')",
            "self._extract_class_variables_for_node(actual_class_def, source)",
            "self._extract_methods_for_node(actual_class_def, source)",
            "self._extract_nested_classes_for_node(actual_class_def, source)",
            "class_variables.copy()",
            "set()",
            "instance_var.signature.split('=')[0].strip()",
            "instance_var.signature.split('=')",
            "instance_variables_seen.add(var_key)",
            "all_variables.append(instance_var)",
            "all_variables.sort(key=lambda v: v.start_line)",
            "classes.append(ClassInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    vars=all_variables,\n                    methods=methods,\n                    nested_classes=nested_classes\n                ))",
            "ClassInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    vars=all_variables,\n                    methods=methods,\n                    nested_classes=nested_classes\n                )",
            "'\\n'.join(sig_parts)",
            "sorted(classes, key=lambda c: c.start_line)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 302,
          "end_line": 340,
          "signature": "def _extract_class_variables_for_node(self, class_node: tree_sitter.Node, source: bytes) -> List[VariableInfo]:",
          "docstring": "Extract class variables for a specific class node, excluding nested class variables.",
          "function_calls": [
            "self.queries['class_variables'].captures(class_node)",
            "self._get_nested_class_ranges(class_node)",
            "set()",
            "self.config.cap(\"var_statement\")",
            "any(\n                    start <= assignment_start < end \n                    for start, end in nested_ranges\n                )",
            "source[node.start_byte:node.end_byte].decode('utf-8').strip()",
            "source[node.start_byte:node.end_byte].decode('utf-8')",
            "seen.add(key)",
            "variables.append(VariableInfo(\n                        start_line=start_line,\n                        end_line=end_line,\n                        signature=signature\n                    ))",
            "VariableInfo(\n                        start_line=start_line,\n                        end_line=end_line,\n                        signature=signature\n                    )"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 342,
          "end_line": 418,
          "signature": "def _extract_methods_for_node(self, class_node: tree_sitter.Node, source: bytes) -> List[FunctionInfo]:",
          "docstring": "Extract methods for a specific class node using matches, excluding nested class methods.",
          "function_calls": [
            "self.queries['class_methods'].matches(class_node)",
            "self._get_nested_class_ranges(class_node)",
            "self.config.cap(\"method_with_decorators\")",
            "self.config.cap(\"method_def\")",
            "any(\n                    start <= method_start < end \n                    for start, end in nested_ranges\n                )",
            "source[method_node.start_byte:method_node.end_byte].decode('utf-8')",
            "signature.split('\\n')",
            "sig_parts.append(line)",
            "line.rstrip().endswith(':')",
            "line.rstrip()",
            "self.config.cap(\"method\")",
            "self._clean_string_literal(\n                        source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')\n                    )",
            "source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')",
            "captures.get(method_def_cap, [None])",
            "self._extract_nested_functions_for_node(actual_method_def, source)",
            "self._extract_function_calls_for_node(actual_method_def, source)",
            "self._extract_instance_variables_for_method(actual_method_def, source)",
            "methods.append(FunctionInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    function_calls=function_calls,\n                    nested_functions=nested_functions,\n                    instance_variables=instance_variables\n                ))",
            "FunctionInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    function_calls=function_calls,\n                    nested_functions=nested_functions,\n                    instance_variables=instance_variables\n                )",
            "'\\n'.join(sig_parts)",
            "sorted(methods, key=lambda m: m.start_line)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 421,
          "end_line": 483,
          "signature": "def _extract_nested_functions_for_node(self, parent_func_node: tree_sitter.Node, source: bytes) -> List[FunctionInfo]:",
          "docstring": "Extract immediate nested functions within a specific function node.\n        \n        This method only extracts functions that are direct children of the parent\n        function, not grandchildren or deeper descendants. Each extracted function\n        is recursively processed to find its own nested functions.\n        ",
          "function_calls": [
            "self.queries['nested_functions'].matches(parent_func_node)",
            "self.config.cap(\"nested_func_with_decorators\")",
            "self.config.cap(\"nested_func_def\")",
            "self._is_immediate_child_function(nested_func_node, parent_func_node)",
            "source[nested_func_node.start_byte:nested_func_node.end_byte].decode('utf-8')",
            "signature.split('\\n')",
            "sig_parts.append(line)",
            "line.rstrip().endswith(':')",
            "line.rstrip()",
            "self.config.cap(\"nested_function\")",
            "self._clean_string_literal(\n                        source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')\n                    )",
            "source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')",
            "captures.get(nested_def_cap, [None])",
            "self._extract_nested_functions_for_node(actual_nested_def, source)",
            "nested_functions.append(FunctionInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    function_calls=self._extract_function_calls_for_node(nested_func_node, source),\n                    nested_functions=deeper_nested_functions\n                ))",
            "FunctionInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    function_calls=self._extract_function_calls_for_node(nested_func_node, source),\n                    nested_functions=deeper_nested_functions\n                )",
            "'\\n'.join(sig_parts)",
            "self._extract_function_calls_for_node(nested_func_node, source)",
            "sorted(nested_functions, key=lambda f: f.start_line)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 485,
          "end_line": 492,
          "signature": "def _is_at_module_level(self, node: tree_sitter.Node) -> bool:",
          "docstring": "Check if a node is at top-level scope using language config.",
          "function_calls": [],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 494,
          "end_line": 496,
          "signature": "def _clean_string_literal(self, string_literal: str) -> str:",
          "docstring": "Delegate string cleaning to language config.",
          "function_calls": [
            "self.config.clean_doc(string_literal)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 498,
          "end_line": 522,
          "signature": "def _is_immediate_child_function(self, child_node: tree_sitter.Node, parent_func_node: tree_sitter.Node) -> bool:",
          "docstring": "Check if a function node is an immediate child of the parent function.\n        \n        This method traverses upward from the child node through any block nodes\n        to determine if it's directly nested within the parent function, not a\n        grandchild or deeper descendant.\n        \n        Args:\n            child_node: The potential nested function node\n            parent_func_node: The parent function being analyzed\n            \n        Returns:\n            True if child_node is an immediate child of parent_func_node\n        ",
          "function_calls": [],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 528,
          "end_line": 561,
          "signature": "def _get_nested_function_ranges(self, func_node: tree_sitter.Node) -> List[Tuple[int, int]]:",
          "docstring": "Get byte ranges of immediate nested functions within a function node.\n        \n        Only returns ranges for functions that are direct children of the given\n        function node, not grandchildren or deeper descendants.\n        \n        Returns:\n            List of (start_byte, end_byte) tuples for each immediate child function.\n        ",
          "function_calls": [
            "self.queries['nested_functions'].matches(func_node)",
            "self.config.cap(\"nested_func_with_decorators\")",
            "self.config.cap(\"nested_func_def\")",
            "self._is_immediate_child_function(nested_func_node, func_node)",
            "nested_ranges.append((nested_func_node.start_byte, nested_func_node.end_byte))"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 563,
          "end_line": 593,
          "signature": "def _get_nested_class_ranges(self, class_node: tree_sitter.Node) -> List[Tuple[int, int]]:",
          "docstring": "Get byte ranges of immediate nested classes within a class node.\n        \n        Only returns ranges for classes that are direct children of the given\n        class node, not grandchildren or deeper descendants.\n        \n        Returns:\n            List of (start_byte, end_byte) tuples for each immediate child class.\n        ",
          "function_calls": [
            "self.queries['nested_classes'].matches(class_node)",
            "self.config.cap(\"nested_class_with_decorators\")",
            "self.config.cap(\"nested_class_def\")",
            "nested_ranges.append((nested_class_node.start_byte, nested_class_node.end_byte))"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 595,
          "end_line": 646,
          "signature": "def _extract_function_calls_for_node(self, func_node: tree_sitter.Node, source: bytes, start_line: Optional[int] = None, end_line: Optional[int] = None) -> List[str]:",
          "docstring": "Extract function call names inside a function node via language-specific query.\n\n        This routine relies entirely on the `function_calls` query defined per\n        language. Any language wishing to support call-tracking must provide\n        a `function_calls.scm` under its queries directory and capture the\n        callable expression as `@function_call` (or the language-specific\n        alias specified via :py:meth:`LanguageConfig.cap`).\n        \n        This method now filters out calls that are within nested functions,\n        returning only direct calls within the function body.\n        \n        Args:\n            func_node: The function AST node\n            source: The full source code\n            start_line: Deprecated parameter (kept for compatibility)\n            end_line: Deprecated parameter (kept for compatibility)\n        ",
          "function_calls": [
            "self.queries[\"function_calls\"].captures(func_node)",
            "self.config.cap(\"function_call\")",
            "self._get_nested_function_ranges(func_node)",
            "any(\n                start <= call_start < end \n                for start, end in nested_ranges\n            )",
            "direct_call_nodes.append(call_node)",
            "sorted(direct_call_nodes, key=lambda n: n.start_byte)",
            "source[n.start_byte:n.end_byte].decode('utf-8').strip()",
            "source[n.start_byte:n.end_byte].decode('utf-8')"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 648,
          "end_line": 708,
          "signature": "def _extract_instance_variables_for_method(self, method_node: tree_sitter.Node, source: bytes) -> List[VariableInfo]:",
          "docstring": "Extract instance variable assignments from a method node.\n\n        This method extracts assignments to instance variables (self.* assignments)\n        within a method body, filtering out assignments within nested functions.\n        \n        Args:\n            method_node: The method AST node\n            source: The full source code\n            \n        Returns:\n            List of VariableInfo objects for instance variable assignments\n        ",
          "function_calls": [
            "self.queries[\"instance_variables\"].captures(method_node)",
            "self._get_nested_function_ranges(method_node)",
            "any(\n                start <= assignment_start < end \n                for start, end in nested_ranges\n            )",
            "direct_assignment_nodes.append(assignment_node)",
            "set()",
            "source[node.start_byte:node.end_byte].decode('utf-8').strip()",
            "source[node.start_byte:node.end_byte].decode('utf-8')",
            "assignment_text.startswith('self.')",
            "seen.add(key)",
            "instance_variables.append(VariableInfo(\n                        start_line=start_line,\n                        end_line=end_line,\n                        signature=assignment_text\n                    ))",
            "VariableInfo(\n                        start_line=start_line,\n                        end_line=end_line,\n                        signature=assignment_text\n                    )",
            "sorted(instance_variables, key=lambda v: v.start_line)"
          ],
          "nested_functions": [],
          "instance_variables": []
        },
        {
          "start_line": 710,
          "end_line": 788,
          "signature": "def _extract_nested_classes_for_node(self, class_node: tree_sitter.Node, source: bytes) -> List[ClassInfo]:",
          "docstring": "Extract nested class definitions within a class node.",
          "function_calls": [
            "self.queries['nested_classes'].matches(class_node)",
            "self.config.cap(\"nested_class_with_decorators\")",
            "self.config.cap(\"nested_class_def\")",
            "source[nested_node.start_byte:nested_node.end_byte].decode('utf-8')",
            "signature.split('\\n')",
            "sig_parts.append(line)",
            "line.rstrip()",
            "line.rstrip().endswith(':')",
            "self.config.cap(\"nested_class\")",
            "self._clean_string_literal(\n                        source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')\n                    )",
            "source[docstring_node.start_byte:docstring_node.end_byte].decode('utf-8')",
            "self._extract_class_variables_for_node(actual_nested_def, source)",
            "self._extract_methods_for_node(actual_nested_def, source)",
            "self._extract_nested_classes_for_node(actual_nested_def, source)",
            "class_variables.copy()",
            "set()",
            "instance_var.signature.split('=')[0].strip()",
            "instance_var.signature.split('=')",
            "instance_variables_seen.add(var_key)",
            "all_variables.append(instance_var)",
            "all_variables.sort(key=lambda v: v.start_line)",
            "nested_classes.append(ClassInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    vars=all_variables,\n                    methods=methods,\n                    nested_classes=deeper_nested\n                ))",
            "ClassInfo(\n                    start_line=start_line,\n                    end_line=end_line,\n                    signature='\\n'.join(sig_parts),\n                    docstring=docstring,\n                    vars=all_variables,\n                    methods=methods,\n                    nested_classes=deeper_nested\n                )",
            "'\\n'.join(sig_parts)",
            "sorted(nested_classes, key=lambda c: c.start_line)"
          ],
          "nested_functions": [],
          "instance_variables": []
        }
      ],
      "nested_classes": []
    }
  ]
}