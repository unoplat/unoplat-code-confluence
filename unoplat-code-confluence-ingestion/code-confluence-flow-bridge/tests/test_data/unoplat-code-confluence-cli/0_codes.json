[{"NodeName":"ProgrammingLanguage","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["str","Enum"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":11,"StopLine":15},"Content":"class ProgrammingLanguage(str, Enum):    PYTHON = 'python'"},{"NodeName":"PackageManagerType","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["str","Enum"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":15,"StopLine":21},"Content":"class PackageManagerType(str, Enum):    POETRY = \"poetry\"    PIP = \"pip\"    UV = \"uv\""},{"NodeName":"DatabaseType","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["str","Enum"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":21,"StopLine":27},"Content":"class DatabaseType(str, Enum):    NEO4J = \"neo4j\"# Configuration Models (BaseModel for JSON config)"},{"NodeName":"ProgrammingLanguageMetadata","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":27,"StopLine":33},"Content":"class ProgrammingLanguageMetadata(BaseModel):    language: ProgrammingLanguage    package_manager: PackageManagerType    language_version: Optional[str] = None"},{"NodeName":"CodebaseConfig","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":33,"StopLine":39},"Content":"class CodebaseConfig(BaseModel):    codebase_folder: str    root_package: Optional[str] = None    programming_language_metadata: ProgrammingLanguageMetadata"},{"NodeName":"RepositorySettings","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":39,"StopLine":45},"Content":"class RepositorySettings(BaseModel):    git_url: str    output_path: str    codebases: List[CodebaseConfig]"},{"NodeName":"ArchGuardConfig","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":45,"StopLine":50},"Content":"class ArchGuardConfig(BaseModel):    download_url: str    download_directory: str"},{"NodeName":"LLMProviderConfig","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":50,"StopLine":55},"Content":"class LLMProviderConfig(BaseModel):    llm_model_provider: str    llm_model_provider_args: Dict[str, Any]"},{"NodeName":"DatabaseConfig","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":55,"StopLine":60},"Content":"class DatabaseConfig(BaseModel):    name: DatabaseType    uri: str"},{"NodeName":"DatabaseSettings","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":60,"StopLine":66},"Content":"class DatabaseSettings(BaseModel):    host: str    port: int# Main Configuration (BaseModel for JSON config)"},{"NodeName":"AppConfig","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","MultipleExtend":["BaseModel"],"Functions":[{"Name":"load","Parameters":[{"TypeValue":"cls","TypeType":""},{"DefaultValue":"None","TypeValue":"config_path","TypeType":"Optional[str]"}],"FunctionCalls":[{"NodeName":"json","FunctionName":"loads","Position":{"StartLine":80,"StartLinePosition":30,"StopLine":80,"StopLinePosition":45}}],"Annotations":[{"Name":"classmethod","Position":{"StartLine":74,"StartLinePosition":4,"StopLine":75,"StopLinePosition":4}}],"Position":{"StartLine":75,"StartLinePosition":4,"StopLine":86},"LocalVariables":[{"TypeValue":"PYTHON","TypeType":"'python'"},{"TypeValue":"POETRY","TypeType":"\"poetry\""},{"TypeValue":"PIP","TypeType":"\"pip\""},{"TypeValue":"UV","TypeType":"\"uv\""},{"TypeValue":"NEO4J","TypeType":"\"neo4j\""},{"TypeValue":"language","TypeType":""},{"TypeValue":"package_manager","TypeType":""},{"TypeValue":"language_version","TypeType":""},{"TypeValue":"codebase_folder","TypeType":""},{"TypeValue":"root_package","TypeType":""},{"TypeValue":"programming_language_metadata","TypeType":""},{"TypeValue":"git_url","TypeType":""},{"TypeValue":"output_path","TypeType":""},{"TypeValue":"codebases","TypeType":""},{"TypeValue":"download_url","TypeType":""},{"TypeValue":"download_directory","TypeType":""},{"TypeValue":"llm_model_provider","TypeType":""},{"TypeValue":"llm_model_provider_args","TypeType":""},{"TypeValue":"name","TypeType":""},{"TypeValue":"uri","TypeType":""},{"TypeValue":"host","TypeType":""},{"TypeValue":"port","TypeType":""},{"TypeValue":"repositories","TypeType":""},{"TypeValue":"llm_provider_config","TypeType":""},{"TypeValue":"databases","TypeType":""},{"TypeValue":"json_output","TypeType":""},{"TypeValue":"sentence_transformer_model","TypeType":""},{"TypeValue":"config_file","TypeType":"config_path"},{"TypeValue":"config_data","TypeType":"json"}],"Content":"def load(cls, config_path: Optional[str] = None) -> \"AppConfig\":        \"\"\"Load configuration from JSON file\"\"\"        if config_path:            config_file = config_path        with open(config_file, 'r') as f:            config_data = json.loads(f.read())        return cls(**config_data)# Main Settings Class"}],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":66,"StopLine":86},"Content":"class AppConfig(BaseModel):    \"\"\"JSON configuration\"\"\"    repositories: List[RepositorySettings]    llm_provider_config: Optional[LLMProviderConfig] = None    databases: Optional[List[DatabaseConfig]] = None    json_output: Optional[bool] = None    sentence_transformer_model: Optional[str] = None    @classmethod    def load(cls, config_path: Optional[str] = None) -> \"AppConfig\":        \"\"\"Load configuration from JSON file\"\"\"        if config_path:            config_file = config_path        with open(config_file, 'r') as f:            config_data = json.loads(f.read())        return cls(**config_data)# Main Settings Class"},{"NodeName":"AppSettings","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/config/settings.py","Functions":[{"Name":"__init__","Parameters":[{"DefaultValue":"None","TypeValue":"config_path","TypeType":"Optional[str]"}],"FunctionCalls":[{"NodeName":"AppConfig","FunctionName":"load","Position":{"StartLine":90,"StartLinePosition":32,"StopLine":90,"StopLinePosition":49}}],"Position":{"StartLine":89,"StartLinePosition":4,"StopLine":92,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"PYTHON","TypeType":"'python'"},{"TypeValue":"POETRY","TypeType":"\"poetry\""},{"TypeValue":"PIP","TypeType":"\"pip\""},{"TypeValue":"UV","TypeType":"\"uv\""},{"TypeValue":"NEO4J","TypeType":"\"neo4j\""},{"TypeValue":"language","TypeType":""},{"TypeValue":"package_manager","TypeType":""},{"TypeValue":"language_version","TypeType":""},{"TypeValue":"codebase_folder","TypeType":""},{"TypeValue":"root_package","TypeType":""},{"TypeValue":"programming_language_metadata","TypeType":""},{"TypeValue":"git_url","TypeType":""},{"TypeValue":"output_path","TypeType":""},{"TypeValue":"codebases","TypeType":""},{"TypeValue":"download_url","TypeType":""},{"TypeValue":"download_directory","TypeType":""},{"TypeValue":"llm_model_provider","TypeType":""},{"TypeValue":"llm_model_provider_args","TypeType":""},{"TypeValue":"name","TypeType":""},{"TypeValue":"uri","TypeType":""},{"TypeValue":"host","TypeType":""},{"TypeValue":"port","TypeType":""},{"TypeValue":"repositories","TypeType":""},{"TypeValue":"llm_provider_config","TypeType":""},{"TypeValue":"databases","TypeType":""},{"TypeValue":"json_output","TypeType":""},{"TypeValue":"sentence_transformer_model","TypeType":""},{"TypeValue":"config_file","TypeType":"config_path"},{"TypeValue":"config_data","TypeType":"json"},{"TypeValue":"self._config","TypeType":"AppConfig"}],"Content":"def __init__(self, config_path: Optional[str] = None):        self._config = AppConfig.load(config_path)    "},{"Name":"config","Annotations":[{"Name":"property","Position":{"StartLine":92,"StartLinePosition":4,"StopLine":93,"StopLinePosition":4}}],"Position":{"StartLine":93,"StartLinePosition":4,"StopLine":97,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"PYTHON","TypeType":"'python'"},{"TypeValue":"POETRY","TypeType":"\"poetry\""},{"TypeValue":"PIP","TypeType":"\"pip\""},{"TypeValue":"UV","TypeType":"\"uv\""},{"TypeValue":"NEO4J","TypeType":"\"neo4j\""},{"TypeValue":"language","TypeType":""},{"TypeValue":"package_manager","TypeType":""},{"TypeValue":"language_version","TypeType":""},{"TypeValue":"codebase_folder","TypeType":""},{"TypeValue":"root_package","TypeType":""},{"TypeValue":"programming_language_metadata","TypeType":""},{"TypeValue":"git_url","TypeType":""},{"TypeValue":"output_path","TypeType":""},{"TypeValue":"codebases","TypeType":""},{"TypeValue":"download_url","TypeType":""},{"TypeValue":"download_directory","TypeType":""},{"TypeValue":"llm_model_provider","TypeType":""},{"TypeValue":"llm_model_provider_args","TypeType":""},{"TypeValue":"name","TypeType":""},{"TypeValue":"uri","TypeType":""},{"TypeValue":"host","TypeType":""},{"TypeValue":"port","TypeType":""},{"TypeValue":"repositories","TypeType":""},{"TypeValue":"llm_provider_config","TypeType":""},{"TypeValue":"databases","TypeType":""},{"TypeValue":"json_output","TypeType":""},{"TypeValue":"sentence_transformer_model","TypeType":""},{"TypeValue":"config_file","TypeType":"config_path"},{"TypeValue":"config_data","TypeType":"json"},{"TypeValue":"self._config","TypeType":"AppConfig"}],"Content":"def config(self) -> AppConfig:        return self._config    # Convenience properties    "},{"Name":"repositories","Annotations":[{"Name":"property","Position":{"StartLine":97,"StartLinePosition":4,"StopLine":98,"StopLinePosition":4}}],"Position":{"StartLine":98,"StartLinePosition":4,"StopLine":101,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"PYTHON","TypeType":"'python'"},{"TypeValue":"POETRY","TypeType":"\"poetry\""},{"TypeValue":"PIP","TypeType":"\"pip\""},{"TypeValue":"UV","TypeType":"\"uv\""},{"TypeValue":"NEO4J","TypeType":"\"neo4j\""},{"TypeValue":"language","TypeType":""},{"TypeValue":"package_manager","TypeType":""},{"TypeValue":"language_version","TypeType":""},{"TypeValue":"codebase_folder","TypeType":""},{"TypeValue":"root_package","TypeType":""},{"TypeValue":"programming_language_metadata","TypeType":""},{"TypeValue":"git_url","TypeType":""},{"TypeValue":"output_path","TypeType":""},{"TypeValue":"codebases","TypeType":""},{"TypeValue":"download_url","TypeType":""},{"TypeValue":"download_directory","TypeType":""},{"TypeValue":"llm_model_provider","TypeType":""},{"TypeValue":"llm_model_provider_args","TypeType":""},{"TypeValue":"name","TypeType":""},{"TypeValue":"uri","TypeType":""},{"TypeValue":"host","TypeType":""},{"TypeValue":"port","TypeType":""},{"TypeValue":"repositories","TypeType":""},{"TypeValue":"llm_provider_config","TypeType":""},{"TypeValue":"databases","TypeType":""},{"TypeValue":"json_output","TypeType":""},{"TypeValue":"sentence_transformer_model","TypeType":""},{"TypeValue":"config_file","TypeType":"config_path"},{"TypeValue":"config_data","TypeType":"json"},{"TypeValue":"self._config","TypeType":"AppConfig"}],"Content":"def repositories(self) -> List[RepositorySettings]:        return self.config.repositories    "},{"Name":"databases","Annotations":[{"Name":"property","Position":{"StartLine":101,"StartLinePosition":4,"StopLine":102,"StopLinePosition":4}}],"Position":{"StartLine":102,"StartLinePosition":4,"StopLine":107,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"PYTHON","TypeType":"'python'"},{"TypeValue":"POETRY","TypeType":"\"poetry\""},{"TypeValue":"PIP","TypeType":"\"pip\""},{"TypeValue":"UV","TypeType":"\"uv\""},{"TypeValue":"NEO4J","TypeType":"\"neo4j\""},{"TypeValue":"language","TypeType":""},{"TypeValue":"package_manager","TypeType":""},{"TypeValue":"language_version","TypeType":""},{"TypeValue":"codebase_folder","TypeType":""},{"TypeValue":"root_package","TypeType":""},{"TypeValue":"programming_language_metadata","TypeType":""},{"TypeValue":"git_url","TypeType":""},{"TypeValue":"output_path","TypeType":""},{"TypeValue":"codebases","TypeType":""},{"TypeValue":"download_url","TypeType":""},{"TypeValue":"download_directory","TypeType":""},{"TypeValue":"llm_model_provider","TypeType":""},{"TypeValue":"llm_model_provider_args","TypeType":""},{"TypeValue":"name","TypeType":""},{"TypeValue":"uri","TypeType":""},{"TypeValue":"host","TypeType":""},{"TypeValue":"port","TypeType":""},{"TypeValue":"repositories","TypeType":""},{"TypeValue":"llm_provider_config","TypeType":""},{"TypeValue":"databases","TypeType":""},{"TypeValue":"json_output","TypeType":""},{"TypeValue":"sentence_transformer_model","TypeType":""},{"TypeValue":"config_file","TypeType":"config_path"},{"TypeValue":"config_data","TypeType":"json"},{"TypeValue":"self._config","TypeType":"AppConfig"}],"Content":"def databases(self) -> List[DatabaseConfig]:        if self.config.databases is None:            return []  # Return empty list instead of None        return self.config.databases    "},{"Name":"get_settings","Parameters":[{"TypeValue":"cls","TypeType":""},{"DefaultValue":"None","TypeValue":"config_path","TypeType":"Optional[str]"}],"Annotations":[{"Name":"classmethod","Position":{"StartLine":107,"StartLinePosition":4,"StopLine":108,"StopLinePosition":4}}],"Position":{"StartLine":108,"StartLinePosition":4,"StopLine":115},"LocalVariables":[{"TypeValue":"PYTHON","TypeType":"'python'"},{"TypeValue":"POETRY","TypeType":"\"poetry\""},{"TypeValue":"PIP","TypeType":"\"pip\""},{"TypeValue":"UV","TypeType":"\"uv\""},{"TypeValue":"NEO4J","TypeType":"\"neo4j\""},{"TypeValue":"language","TypeType":""},{"TypeValue":"package_manager","TypeType":""},{"TypeValue":"language_version","TypeType":""},{"TypeValue":"codebase_folder","TypeType":""},{"TypeValue":"root_package","TypeType":""},{"TypeValue":"programming_language_metadata","TypeType":""},{"TypeValue":"git_url","TypeType":""},{"TypeValue":"output_path","TypeType":""},{"TypeValue":"codebases","TypeType":""},{"TypeValue":"download_url","TypeType":""},{"TypeValue":"download_directory","TypeType":""},{"TypeValue":"llm_model_provider","TypeType":""},{"TypeValue":"llm_model_provider_args","TypeType":""},{"TypeValue":"name","TypeType":""},{"TypeValue":"uri","TypeType":""},{"TypeValue":"host","TypeType":""},{"TypeValue":"port","TypeType":""},{"TypeValue":"repositories","TypeType":""},{"TypeValue":"llm_provider_config","TypeType":""},{"TypeValue":"databases","TypeType":""},{"TypeValue":"json_output","TypeType":""},{"TypeValue":"sentence_transformer_model","TypeType":""},{"TypeValue":"config_file","TypeType":"config_path"},{"TypeValue":"config_data","TypeType":"json"},{"TypeValue":"self._config","TypeType":"AppConfig"}],"Content":"def get_settings(cls, config_path: Optional[str] = None) -> \"AppSettings\":        \"\"\"        Get application settings with optional config file override        Args:            config_path: Optional path to JSON config file        \"\"\"        return cls(config_path)"}],"Imports":[{"Source":"enum","UsageName":["Enum"]},{"Source":"json"},{"Source":"typing","UsageName":["Any","Dict","List","Optional"]},{"Source":"pydantic","UsageName":["BaseModel"]}],"Position":{"StartLine":86,"StopLine":115},"Content":"class AppSettings:    \"\"\"Application settings combining environment variables and JSON config\"\"\"    def __init__(self, config_path: Optional[str] = None):        self._config = AppConfig.load(config_path)    @property    def config(self) -> AppConfig:        return self._config    # Convenience properties    @property    def repositories(self) -> List[RepositorySettings]:        return self.config.repositories    @property    def databases(self) -> List[DatabaseConfig]:        if self.config.databases is None:            return []  # Return empty list instead of None        return self.config.databases    @classmethod    def get_settings(cls, config_path: Optional[str] = None) -> \"AppSettings\":        \"\"\"        Get application settings with optional config file override        Args:            config_path: Optional path to JSON config file        \"\"\"        return cls(config_path)"},{"NodeName":"CodeConfluenceConnector","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/connector/api_client.py","Functions":[{"Name":"__init__","Parameters":[{"TypeValue":"base_url","TypeType":"str"},{"TypeValue":"github_token","TypeType":"str"}],"Position":{"StartLine":11,"StartLinePosition":4,"StopLine":19,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"self.base_url","TypeType":"base_url"},{"TypeValue":"self.github_token","TypeType":"github_token"},{"TypeValue":"self.headers","TypeType":"{'Content-Type':'application/json','Authorization':f'Bearer {self.github_token}'}"}],"Content":"def __init__(self, base_url: str, github_token: str):        self.base_url = base_url.rstrip('/')        self.github_token = github_token.strip()        self.headers = {            'Content-Type': 'application/json',            'Authorization': f'Bearer {self.github_token}'        }    "},{"Name":"_ingest_single_repository","Parameters":[{"TypeValue":"repository","TypeType":"RepositorySettings"}],"FunctionCalls":[{"NodeName":"logger","FunctionName":"error","Position":{"StartLine":50,"StartLinePosition":18,"StopLine":50,"StopLinePosition":102}}],"Modifiers":["async"],"Position":{"StartLine":19,"StartLinePosition":4,"StopLine":53,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"self.base_url","TypeType":"base_url"},{"TypeValue":"self.github_token","TypeType":"github_token"},{"TypeValue":"self.headers","TypeType":"{'Content-Type':'application/json','Authorization':f'Bearer {self.github_token}'}"},{"TypeValue":"response","TypeType":""}],"Content":"async def _ingest_single_repository(self, repository: RepositorySettings) -> Dict:        \"\"\"        Send POST request to start ingestion for a single repository        \"\"\"        try:            async with httpx.AsyncClient() as client:                response = await client.post(                    f\"{self.base_url}/start-ingestion\",                    json=repository.model_dump(),                    headers=self.headers,                    timeout=30.0                )                response.raise_for_status()                logger.info(f\"Started ingestion for repository: {repository.git_url}\")                return response.json()        except httpx.HTTPStatusError as e:            logger.error(                f\"HTTP error for repository {repository.git_url}:\\n\"                f\"Status code: {e.response.status_code}\\n\"                f\"Error message: {e.response.text}\\n\"                f\"Request URL: {e.request.url}\"            )            raise        except httpx.RequestError as e:            logger.error(                f\"Request failed for repository {repository.git_url}:\\n\"                f\"Error: {str(e)}\\n\"                f\"Request URL: {e.request.url}\"            )            raise        except Exception as e:            logger.error(f\"An unexpected error occurred for repository {repository.git_url}: {str(e)}\")            raise    "},{"Name":"start_ingestion","Parameters":[{"TypeValue":"config","TypeType":"AppConfig"}],"FunctionCalls":[{"NodeName":"processed_results","FunctionName":"append","Position":{"StartLine":71,"StartLinePosition":33,"StopLine":71,"StopLinePosition":47}}],"Modifiers":["async"],"Position":{"StartLine":53,"StartLinePosition":4,"StopLine":73,"StopLinePosition":46},"LocalVariables":[{"TypeValue":"self.base_url","TypeType":"base_url"},{"TypeValue":"self.github_token","TypeType":"github_token"},{"TypeValue":"self.headers","TypeType":"{'Content-Type':'application/json','Authorization':f'Bearer {self.github_token}'}"},{"TypeValue":"response","TypeType":""},{"TypeValue":"tasks","TypeType":"[]"},{"TypeValue":"task","TypeType":"asyncio"},{"TypeValue":"results","TypeType":""},{"TypeValue":"processed_results","TypeType":"[]"}],"Content":"async def start_ingestion(self, config: AppConfig) -> List[Dict]:        \"\"\"        Send parallel POST requests to start ingestion for each repository        \"\"\"        tasks = []        for repository in config.repositories:            task = asyncio.create_task(self._ingest_single_repository(repository))            tasks.append(task)                logger.info(f\"Starting ingestion for {len(tasks)} repositories\")        results = await asyncio.gather(*tasks, return_exceptions=True)                # Process results and log any errors        processed_results = []        for i, result in enumerate(results):            if isinstance(result, Exception):                logger.error(f\"Failed to process repository {config.repositories[i].git_url}: {result}\")            else:                processed_results.append(result)                return processed_results #type: ignore"}],"Imports":[{"Source":"unoplat_code_confluence_cli.config.settings","UsageName":["AppConfig","RepositorySettings"]},{"Source":"asyncio"},{"Source":"typing","UsageName":["Dict","List"]},{"Source":"httpx"},{"Source":"loguru","UsageName":["logger"]}],"Position":{"StartLine":10,"StopLine":73,"StopLinePosition":46},"Content":"class CodeConfluenceConnector:    def __init__(self, base_url: str, github_token: str):        self.base_url = base_url.rstrip('/')        self.github_token = github_token.strip()        self.headers = {            'Content-Type': 'application/json',            'Authorization': f'Bearer {self.github_token}'        }    async def _ingest_single_repository(self, repository: RepositorySettings) -> Dict:        \"\"\"        Send POST request to start ingestion for a single repository        \"\"\"        try:            async with httpx.AsyncClient() as client:                response = await client.post(                    f\"{self.base_url}/start-ingestion\",                    json=repository.model_dump(),                    headers=self.headers,                    timeout=30.0                )                response.raise_for_status()                logger.info(f\"Started ingestion for repository: {repository.git_url}\")                return response.json()        except httpx.HTTPStatusError as e:            logger.error(                f\"HTTP error for repository {repository.git_url}:\\n\"                f\"Status code: {e.response.status_code}\\n\"                f\"Error message: {e.response.text}\\n\"                f\"Request URL: {e.request.url}\"            )            raise        except httpx.RequestError as e:            logger.error(                f\"Request failed for repository {repository.git_url}:\\n\"                f\"Error: {str(e)}\\n\"                f\"Request URL: {e.request.url}\"            )            raise        except Exception as e:            logger.error(f\"An unexpected error occurred for repository {repository.git_url}: {str(e)}\")            raise    async def start_ingestion(self, config: AppConfig) -> List[Dict]:        \"\"\"        Send parallel POST requests to start ingestion for each repository        \"\"\"        tasks = []        for repository in config.repositories:            task = asyncio.create_task(self._ingest_single_repository(repository))            tasks.append(task)                logger.info(f\"Starting ingestion for {len(tasks)} repositories\")        results = await asyncio.gather(*tasks, return_exceptions=True)                # Process results and log any errors        processed_results = []        for i, result in enumerate(results):            if isinstance(result, Exception):                logger.error(f\"Failed to process repository {config.repositories[i].git_url}: {result}\")            else:                processed_results.append(result)                return processed_results #type: ignore"},{"NodeName":"StatsManager","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/connector/analytics/utils/helpers.py","Functions":[{"Name":"__init__","Parameters":[{"TypeValue":"data","TypeType":"list[int]"}],"FunctionCalls":[{"NodeName":"self","FunctionName":"_data","Position":{"StartLine":37,"StartLinePosition":12,"StopLine":37,"StopLinePosition":13}}],"Position":{"StartLine":36,"StartLinePosition":4,"StopLine":40,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"STATS_ENABLED","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def __init__(self, data: list[int]) -> None:        self._data: list[int] = data    # Guard clauses used to simplify branch logic    "},{"Name":"_guard_empty","Position":{"StartLine":40,"StartLinePosition":4,"StopLine":44,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"STATS_ENABLED","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def _guard_empty(self) -> None:        if not self._data:            raise ValueError(\"Dataset must contain at least one element.\")    "},{"Name":"minimum","FunctionCalls":[{"NodeName":"self","FunctionName":"_guard_empty","Position":{"StartLine":46,"StartLinePosition":12,"StopLine":46,"StopLinePosition":26}}],"Position":{"StartLine":44,"StartLinePosition":4,"StopLine":49,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"STATS_ENABLED","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def minimum(self) -> int:        \"\"\"Return the minimum value in *data*.\"\"\"        self._guard_empty()        return min(self._data)    "},{"Name":"maximum","FunctionCalls":[{"NodeName":"self","FunctionName":"_guard_empty","Position":{"StartLine":51,"StartLinePosition":12,"StopLine":51,"StopLinePosition":26}}],"Position":{"StartLine":49,"StartLinePosition":4,"StopLine":54,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"STATS_ENABLED","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def maximum(self) -> int:        \"\"\"Return the maximum value in *data*.\"\"\"        self._guard_empty()        return max(self._data)    "},{"Name":"average","FunctionCalls":[{"NodeName":"self","FunctionName":"_guard_empty","Position":{"StartLine":56,"StartLinePosition":12,"StopLine":56,"StopLinePosition":26}}],"Position":{"StartLine":54,"StartLinePosition":4,"StopLine":57,"StopLinePosition":49},"LocalVariables":[{"TypeValue":"STATS_ENABLED","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def average(self) -> float:        \"\"\"Return the arithmetic mean of *data*.\"\"\"        self._guard_empty()        return sum(self._data) / len(self._data) "}],"Imports":[{"Source":"__future__","UsageName":["annotations"]}],"Position":{"StartLine":33,"StopLine":57,"StopLinePosition":49},"Content":"class StatsManager:    \"\"\"Wrap statistics operations for a numeric data-set.\"\"\"    def __init__(self, data: list[int]) -> None:        self._data: list[int] = data    # Guard clauses used to simplify branch logic    def _guard_empty(self) -> None:        if not self._data:            raise ValueError(\"Dataset must contain at least one element.\")    def minimum(self) -> int:        \"\"\"Return the minimum value in *data*.\"\"\"        self._guard_empty()        return min(self._data)    def maximum(self) -> int:        \"\"\"Return the maximum value in *data*.\"\"\"        self._guard_empty()        return max(self._data)    def average(self) -> float:        \"\"\"Return the arithmetic mean of *data*.\"\"\"        self._guard_empty()        return sum(self._data) / len(self._data) "},{"NodeName":"default","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/connector/analytics/utils/helpers.py","Functions":[{"Name":"compute_stats","Parameters":[{"TypeValue":"numbers","TypeType":"list[int]"}],"Position":{"StartLine":16,"StopLine":33},"LocalVariables":[{"TypeValue":"STATS_ENABLED","TypeType":""},{"TypeValue":"total","TypeType":""}],"Content":"def compute_stats(numbers: list[int]) -> dict[str, int | float | None]:    \"\"\"Compute basic statistics for *numbers*.    Returns a mapping containing the element *count*, the *sum* and the    arithmetic *average*.    \"\"\"    if not numbers:        return {\"count\": 0, \"sum\": 0, \"avg\": None}    total: int = sum(numbers)    return {\"count\": len(numbers), \"sum\": total, \"avg\": total / len(numbers)}# ---------------------------------------------------------------------------# Classes# ---------------------------------------------------------------------------"}],"Imports":[{"Source":"__future__","UsageName":["annotations"]}],"Content":"from __future__ import annotations"},{"NodeName":"ReportGenerator","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/connector/analytics/reports/generator.py","Functions":[{"Name":"__init__","Parameters":[{"TypeValue":"data","TypeType":"dict[str,int]"}],"FunctionCalls":[{"NodeName":"self","FunctionName":"_data","Position":{"StartLine":46,"StartLinePosition":12,"StopLine":46,"StopLinePosition":13}}],"Position":{"StartLine":45,"StartLinePosition":4,"StopLine":48,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"GLOBAL_CONSTANT","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def __init__(self, data: dict[str, int]) -> None:        self._data: dict[str, int] = data    "},{"Name":"generate","Position":{"StartLine":48,"StartLinePosition":4,"StopLine":53},"LocalVariables":[{"TypeValue":"GLOBAL_CONSTANT","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""}],"Content":"def generate(self) -> dict[str, int | float]:        \"\"\"Return a computed summary report.\"\"\"        return generate_summary(self._data)"}],"Imports":[{"Source":"__future__","UsageName":["annotations"]},{"Source":"json"}],"Position":{"StartLine":42,"StopLine":53},"Content":"class ReportGenerator:    \"\"\"Generate reports based on provided *data*.\"\"\"    def __init__(self, data: dict[str, int]) -> None:        self._data: dict[str, int] = data    def generate(self) -> dict[str, int | float]:        \"\"\"Return a computed summary report.\"\"\"        return generate_summary(self._data)"},{"NodeName":"SummaryReport","Type":"CLASS","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/connector/analytics/reports/generator.py","Functions":[{"Name":"__init__","Parameters":[{"TypeValue":"summary","TypeType":"dict[str,int|float]"}],"FunctionCalls":[{"NodeName":"self","FunctionName":"_summary","Position":{"StartLine":57,"StartLinePosition":12,"StopLine":57,"StopLinePosition":13}}],"Position":{"StartLine":56,"StartLinePosition":4,"StopLine":59,"StopLinePosition":4},"LocalVariables":[{"TypeValue":"GLOBAL_CONSTANT","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""},{"TypeValue":"self._summary","TypeType":""}],"Content":"def __init__(self, summary: dict[str, int | float]) -> None:        self._summary: dict[str, int | float] = summary    "},{"Name":"to_json","Position":{"StartLine":59,"StartLinePosition":4,"StopLine":63,"StopLinePosition":64},"LocalVariables":[{"TypeValue":"GLOBAL_CONSTANT","TypeType":""},{"TypeValue":"total","TypeType":""},{"TypeValue":"self._data","TypeType":""},{"TypeValue":"self._summary","TypeType":""}],"Content":"def to_json(self) -> str:  # noqa: D401 – simple serializer        \"\"\"Return the summary report as a JSON string.\"\"\"        import json        return json.dumps(self._summary, separators=(\",\", \":\")) "}],"Imports":[{"Source":"__future__","UsageName":["annotations"]},{"Source":"json"}],"Position":{"StartLine":53,"StopLine":63,"StopLinePosition":64},"Content":"class SummaryReport:    \"\"\"Encapsulates a summary report and exposes a *to_json* serializer.\"\"\"    def __init__(self, summary: dict[str, int | float]) -> None:        self._summary: dict[str, int | float] = summary    def to_json(self) -> str:  # noqa: D401 – simple serializer        \"\"\"Return the summary report as a JSON string.\"\"\"        import json        return json.dumps(self._summary, separators=(\",\", \":\")) "},{"NodeName":"default","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/connector/analytics/reports/generator.py","Functions":[{"Name":"generate_summary","Parameters":[{"TypeValue":"data","TypeType":"dict[str,int]"}],"Position":{"StartLine":21,"StopLine":42},"LocalVariables":[{"TypeValue":"GLOBAL_CONSTANT","TypeType":""},{"TypeValue":"total","TypeType":""}],"Content":"def generate_summary(data: dict[str, int]) -> dict[str, int | float]:    \"\"\"Generate a simple numeric summary from *data*.    Args:        data: A mapping of keys to numeric values.    Returns:        A dictionary containing the *count* of elements and the *total* sum as        well as the *average* value.    \"\"\"    if not data:        return {\"count\": 0, \"total\": 0, \"average\": 0.0}    total: int = sum(data.values())    return {\"count\": len(data), \"total\": total, \"average\": total / len(data)}# ---------------------------------------------------------------------------# Classes# ---------------------------------------------------------------------------"}],"Imports":[{"Source":"__future__","UsageName":["annotations"]},{"Source":"json"}],"Content":"from __future__ import annotations"},{"NodeName":"default","FilePath":"/Users/jayghiya/Documents/unoplat/unoplat-codebase-understanding/unoplat-code-confluence-ingestion/code-confluence-flow-bridge/tests/test_data/unoplat-code-confluence-cli/unoplat_code_confluence_cli/__main__.py","Functions":[{"Name":"start_ingestion_process","Parameters":[{"TypeValue":"config_path","TypeType":"str"},{"TypeValue":"github_token","TypeType":"str"}],"FunctionCalls":[{"NodeName":"logger","FunctionName":"error","Position":{"StartLine":35,"StartLinePosition":14,"StopLine":35,"StopLinePosition":54}}],"Modifiers":["async"],"Position":{"StartLine":11,"StopLine":38},"LocalVariables":[{"TypeValue":"app_settings","TypeType":"AppSettings"},{"TypeValue":"base_url","TypeType":"os"},{"TypeValue":"connector","TypeType":"CodeConfluenceConnector"},{"TypeValue":"result","TypeType":""}],"Content":"async def start_ingestion_process(config_path: str, github_token: str) -> None:    \"\"\"    Initialize the connector and start the ingestion process    \"\"\"    try:        # Load settings        app_settings = AppSettings(config_path=config_path)                # Get base URL from environment variable or use default        base_url = os.getenv('CODE_CONFLUENCE_SERVER', 'http://localhost:8000')                # Initialize connector        connector = CodeConfluenceConnector(            base_url=base_url,            github_token=github_token        )                logger.info(f\"Connecting to Code Confluence server at: {base_url}\")                # Start ingestion        result = await connector.start_ingestion(app_settings.config)        logger.info(f\"Ingestion started successfully: {result}\")            except Exception as e:        logger.error(f\"Failed to start ingestion: {e}\")        raise"},{"Name":"main","Parameters":[{"TypeValue":"config","TypeType":""},{"TypeValue":"github_token","TypeType":""}],"FunctionCalls":[{"NodeName":"click","FunctionName":"echo","Position":{"StartLine":53,"StartLinePosition":13,"StopLine":53,"StopLinePosition":40}}],"Annotations":[{"Name":"click.command","Position":{"StartLine":38,"StopLine":39}},{"Name":"click.option","KeyValues":[{"Key":"'--config'"},{"Key":"required","Value":"True"},{"Key":"type","Value":"click.Path(exists=True)"},{"Key":"help","Value":"'Path to the code confluence query engine configuration file.'"}],"Position":{"StartLine":39,"StopLine":41}},{"Name":"click.option","KeyValues":[{"Key":"'--github-token'"},{"Key":"'github_token'"},{"Key":"prompt","Value":"'Enter your GitHub token'"},{"Key":"envvar","Value":"'UNOPLAT_GITHUB_TOKEN'"},{"Key":"help","Value":"'GitHub token for authentication'"}],"Position":{"StartLine":41,"StopLine":44}}],"Position":{"StartLine":44,"StopLine":55},"LocalVariables":[{"TypeValue":"app_settings","TypeType":"AppSettings"},{"TypeValue":"base_url","TypeType":"os"},{"TypeValue":"connector","TypeType":"CodeConfluenceConnector"},{"TypeValue":"result","TypeType":""}],"Content":"def main(config, github_token):    \"\"\"Code Confluence CLI tool.\"\"\"    if click.confirm('Do you want to proceed with ingestion?', default=True):        click.echo(f'Config file: {config}')        click.echo(f'GitHub token: {github_token[:4]}...')                # Run the async function        asyncio.run(start_ingestion_process(config, github_token))    else:        click.echo('Operation cancelled')"}],"Imports":[{"Source":"unoplat_code_confluence_cli.config.settings","UsageName":["AppSettings"]},{"Source":"unoplat_code_confluence_cli.connector.api_client","UsageName":["CodeConfluenceConnector"]},{"Source":"os"},{"Source":"asyncio"},{"Source":"click"},{"Source":"loguru","UsageName":["logger"]}],"Content":"from unoplat_code_confluence_cli.config.settings import AppSettings"}]