[project]
name = "code-confluence-flow-bridge"
version = "0.46.1"
description = "Bridge between Code Confluence User and Ingestion Workflow" 
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi[standard]>=0.115.6",
    "pydantic-settings>=2.7.0",
    "pydantic>=2.10.4",
    "temporalio>=1.9.0",
    "loguru>=0.7.3",
    "gitpython>=3.1.43",
    "pygithub>=2.5.0",
    "requirements-parser>=0.11.0",
    "tomlkit>=0.13.2",
    "pytest>=8.3.5",
    "neomodel>=5.4.2",
    "unoplat-code-confluence-commons>=0.24.0",
    "packaging>=24.2",
    "validate-pyproject[all]>=0.23",
    "sqlmodel>=0.0.24",
    "psycopg2-binary>=2.9.10",
    "passlib[bcrypt]>=1.7.4",
    "gql[aiohttp]>=3.5.3",
    "opentelemetry-api>=1.32.1",
    "opentelemetry-sdk>=1.32.1",
    "opentelemetry-exporter-otlp>=1.32.1",
    "grpcio>=1.71.0",
    "opentelemetry-instrumentation-logging>=0.53b1",
    "asyncpg>=0.27.0",
    "greenlet>=3.1.1",
    "pyyaml>=6.0.2",
    "tiktoken>=0.9.0",
    "tree-sitter-language-pack>=0.8.0",
    "typing-extensions>=4.11",
    "sqlalchemy>=2.0.41",
    "aiofile>=3.9.0",
    "sse-starlette>=3.0.0",
] 

[dependency-groups]
test = [
    "httpx>=0.28.1",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-order>=1.2.1",
    "loguru>=0.7.3",
    "pytest-timeout>=2.4.0",
]

dev = [
    # Type checking and linting tools used only during development
    "mypy>=1.16.0",
    # JSON schema validation for framework definitions
    "check-jsonschema>=0.33.0",
    # Optional: stubs for popular libraries
    # "types-requests>=2.31.0",
]

[tool.uv.sources]
#NOTE: use it for local development to instantly see changes in the schema and its impact
#unoplat-code-confluence-commons = { path = "../../unoplat-code-confluence-commons" }
unoplat-code-confluence-commons = { git = "https://github.com/unoplat/unoplat-code-confluence.git", subdirectory = "unoplat-code-confluence-commons", rev = "unoplat-code-confluence-commons-v0.24.0" }


[tool.uv]
override-dependencies = ["pytest>=8.3.5"]
# do it for kit if required - "fastapi[standard]>=0.115.6"]

[tool.pytest.ini_options]
# Auto mode allows async test functions to run without explicit asyncio.run()
asyncio_mode = "auto"
# Function scope ensures each test gets its own event loop for proper fixture isolation
asyncio_default_fixture_loop_scope = "session"
# Test reporting configuration
addopts = "-ra --durations=10"
# Add src to Python path for application testing
pythonpath = ["src"]

# Register custom markers to silence unknown-mark warnings
markers = [
    "integration: integration tests connecting to external services",
]

