# Package Manager Detection Rules - Version 3
# 
# Simplified Python-only rules with ordered evaluation (no weights).
# Each signature is a homogeneous mapping with peer keys.
#
# Schema for each signature:
#   - file: <string>              - Match exact filename (required if glob not present)
#   - glob: <string>              - Match shell-style patterns (required if file not present)  
#   - contains: <string>          - Fixed substring that must appear in file (optional, only valid with file)
#   - contains_absence: <list>    - Strings that must NOT appear in file (optional, only valid with file)
#
# Key principles:
#   - All signature entries are mappings (no mixed scalar/mapping sequences)
#   - file, glob, contains, and contains_absence are peer keys at same indentation level
#   - Managers are evaluated in order: first match wins (no weight calculations)
#   - Ignores apply to all managers within a language

python:
  # Common directories to ignore during detection
  ignores:
    # Virtual environments
    - venv
    - .venv
    - env
    - .env
    - virtualenv
    # Python cache and build artifacts
    - __pycache__
    - .pytest_cache
    - .tox
    - .mypy_cache
    - .ruff_cache
    - dist
    - build
    - .eggs
    - site-packages
    # Test and coverage
    - htmlcov
    - .coverage
    # IDE and tools
    - .idea
    - .vscode
    # Dependencies
    - node_modules
    # Version control
    - .git
    # Documentation
    - docs/_build
    - site
  
  # Package managers in order of evaluation (first match wins)
  managers:
    - manager: uv
      signatures:
        # UV lockfile is definitive
        - file: uv.lock
        # UV configuration in pyproject.toml
        - file: pyproject.toml
          contains: "[tool.uv]"
      
    - manager: poetry
      signatures:
        # Poetry lockfile is definitive
        - file: poetry.lock
        # Poetry configuration in pyproject.toml
        - file: pyproject.toml
          contains: "[tool.poetry]"

    - manager: pip
      signatures:
        # Modern pip with PEP 621 metadata (must have [project] section)
        - file: pyproject.toml
          contains: "[project]"
          contains_absence:
            - "[tool.poetry]"
            - "[tool.uv]"
        # Classic pip requirements files
        - glob: "requirements*.txt"
        # Legacy setup.py files
        - file: setup.py