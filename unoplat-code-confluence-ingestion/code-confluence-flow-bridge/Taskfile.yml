version: "3"

tasks:
  check-temporal-port:
    cmds:
      - |
        if ! lsof -i:8080 > /dev/null 2>&1; then
          echo "Port 8080 is available"
          exit 0
        else
          echo "Port 8080 is already in use"
          exit 1
        fi
    silent: true

  start-temporal:
    deps: [check-temporal-port]
    cmds:
      # Run temporal server in background using &
      - temporal server start-dev --ui-port 8080

  start-neo4j:
    cmds:
      - docker run 
          -p7474:7474 -p7687:7687 
          -v "$HOME/neo4j/data:/data" 
          -v "$HOME/neo4j/logs:/logs" 
          -v "$HOME/neo4j/import:/var/lib/neo4j/import" 
          -v "$HOME/neo4j/plugins:/plugins" 
          --env NEO4J_AUTH=neo4j/password 
          --env NEO4J_PLUGINS='["apoc"]' 
          --env NEO4J_apoc_export_file_enabled=true 
          --env NEO4J_apoc_import_file_enabled=true 
          --env NEO4J_dbms_security_procedures_unrestricted='*' 
          graphstack/dozerdb:5.25.1.0-alpha.1

  start-dependencies:
    desc: Start all dependencies using docker-compose
    cmds:
      - docker-compose -f local-dependencies-only-docker-compose.yml up -d
      - echo "Waiting for services to be ready..."
      - sleep 10  # Add a brief wait for services to initialize

  stop-dependencies:
    desc: Stop all dependencies and remove volumes
    cmds:
      - docker-compose -f local-dependencies-only-docker-compose.yml down --volumes

  sync:
    desc: Setup project with dependencies
    dir: .
    cmds:
      - uv sync
  
  run-client:
    desc: run client to submit request to code confluence flow code-confluence-flow-bridge
    dir: ../../unoplat-code-confluence-cli
    cmds:
      - uv run unoplat_code_confluence_cli --config example_config_code_confluence_current.json

  run-dev:
    desc: Run FastAPI application in development mode
    deps: [sync]
    dir: src/code_confluence_flow_bridge
    env:
      SCANNER_JAR_PATH: "{{.HOME}}/.unoplat/repositories/assets/scanner_cli-2.3.0-all.jar"
      DB_HOST: "localhost"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_NAME: "code_confluence"
      NEO4J_HOST: "localhost"
      NEO4J_PORT: "7687"
      NEO4J_USERNAME: "neo4j"
      NEO4J_PASSWORD: "password"
      TEMPORAL_SERVER_ADDRESS: "localhost:7233"
      OTEL_EXPORTER_OTLP_ENDPOINT: "localhost:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_SERVICE_NAME: "code-confluence-flow-bridge"
      OTEL_PROPAGATORS: "tracecontext,baggage"
    cmds:
      - uv run fastapi dev

  dev:
    desc: Install dependencies, start required services, and run the application
    cmds:
      - task: start-dependencies
      - task: run-dev

  ensure-scanner-cli:
    desc: Ensure scanner CLI exists in the user's environment
    cmds:
      - |
            SCANNER_DIR="$HOME/.unoplat/repositories/assets"
            SCANNER_JAR="scanner_cli-2.2.8-all.jar"
            SCANNER_URL="https://github.com/archguard/archguard/releases/download/v2.2.8/$SCANNER_JAR"
    
            # Create directory if it doesn't exist
            mkdir -p "$SCANNER_DIR"
    
            # Download scanner CLI if not found
            if [ ! -f "$SCANNER_DIR/$SCANNER_JAR" ]; then
              echo "Downloading Scanner CLI..."
              curl -L -o "$SCANNER_DIR/$SCANNER_JAR" "$SCANNER_URL"
            else
              echo "Scanner CLI already exists."
            fi

  generate-test-prerequisites:
    desc: Generate test prerequisites
    deps: [ensure-scanner-cli]
    dir: tests/test_data/unoplat-code-confluence-cli
    cmds:
      - |
        SCANNER_DIR="$HOME/.unoplat/repositories/assets"
        SCANNER_JAR="scanner_cli-2.2.8-all.jar"
        
        java -jar "$SCANNER_DIR/$SCANNER_JAR" \
          --with-function-code --language=python \
          --output=arrow --output=json \
          --path=unoplat_code_confluence_cli \
          --output-dir=unoplat_code_confluence_cli/ \
          --depth=20

  test:
    desc: Run tests with coverage
    deps: [generate-test-prerequisites, start-dependencies]
    dir: .
    cmds:
      # Sync only the test dependencies group before running tests.
      - uv sync --group test
      - uv run pytest --cov=src/code_confluence_flow_bridge --cov-report=html:coverage_reports tests/ -v
      - task: stop-dependencies

  ci-test:
    desc: Run tests in CI mode using act command with additional environment variable
    dir: ../../
    env:
      DOCKER_HOST: "unix:///{{.HOME}}/.orbstack/run/docker.sock"
    cmds:
      - act pull_request_target -j test-uv-projects -s GITHUB_TOKEN="$(gh auth token)" --env GITHUB_REPOSITORY="unoplat/unoplat-code-confluence" --env GITHUB_HEAD_REF="end-end-test-local-temporal-workflow" --env GITHUB_BASE_REF="main" --local-repository="." --container-architecture linux/amd64 -P ubuntu-latest=catthehacker/ubuntu:act-latest