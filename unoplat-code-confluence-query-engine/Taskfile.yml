version: "3"





tasks:
  start-dependencies:
    desc: Start all dependencies using docker-compose including code-confluence-flow-bridge
    cmds:
      - docker compose -f local-dependencies-docker-compose.yml up -d
      - echo "Waiting for services to be ready..."
      - sleep 15  # Wait for services to initialize

  stop-dependencies:
    desc: Stop all dependencies and remove volumes
    cmds:
      - docker compose -f local-dependencies-docker-compose.yml down --volumes

  sync:
    desc: Setup project with dependencies
    dir: .
    cmds:
      - uv sync

  update-package:
    desc: Update a specific package to the latest allowed version using uv (usage - task update-package PACKAGE=package_name)
    vars:
      PACKAGE: '{{.PACKAGE}}'
    requires:
      vars: [PACKAGE]
    cmds:
      - uv lock --upgrade-package {{.PACKAGE}}

  update-all-packages:
    desc: Update all packages to the latest allowed versions using uv
    cmds:
      - uv lock --upgrade

  run-dev:
    desc: Run FastAPI query engine in development mode
    deps: [sync]
    dir: src/unoplat_code_confluence_query_engine
    env:
      CODE_CONFLUENCE_BRIDGE_URL: "http://localhost:8000"
      TOKEN_ENCRYPTION_KEY: "0PiVvlu6HExNWkYjukuG0CAV930B4OsqXNPItAvsxhQ="
      MCP_SERVERS_CONFIG_PATH: "../../mcp-servers.json"
    cmds:
      - uv run fastapi dev --port 8001

  dev:
    desc: Start dependencies and run the query engine application
    cmds:
      - task: start-dependencies
      - task: run-dev

  mock-sse:
    desc: Run mock SSE server (replays docs/sse-agent-results.txt) on port 8002
    dir: experiments
    cmds:
      - uv run fastapi dev mock_sse_server.py --port 8002

  test:
    desc: Run tests with coverage
    dir: .
    cmds:
      - task: start-dependencies
      - uv sync --group test
      - uv run --python 3.13 --group test pytest --cov=src/unoplat_code_confluence_query_engine --cov-report=html:coverage_reports tests/ -v
      - task: stop-dependencies

  lint:
    desc: Run ruff linter on the codebase
    dir: .
    cmds:
      - uv run --group dev ruff check src/

  lint-fix:
    desc: Run ruff linter and auto-fix issues
    dir: .
    cmds:
      - uv run --group dev ruff check src/ --fix

  typecheck:
    desc: Run mypy type checker on the codebase
    dir: .
    cmds:
      - uv run --group dev mypy src/

  format:
    desc: Format code using ruff
    dir: .
    cmds:
      - uv run --group dev ruff format src/

  code-quality:
    desc: Run all code quality checks (lint + typecheck)
    dir: .
    cmds:
      - task: lint
      - task: typecheck

  find-pytest-errors:
    desc: Diagnose pytest test discovery issues and import errors
    dir: .
    cmds:
     - uv run --group test pytest --collect-only tests/