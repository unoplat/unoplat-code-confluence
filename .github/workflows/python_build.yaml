name: Develop Branch Action
on:
  pull_request_target:
    types: 
      - opened
      - synchronize
      - reopened
    branches:
      - main
    paths:
      - 'unoplat-code-confluence-commons/**'
      - 'unoplat-code-confluence-ingestion/**'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path: ['unoplat-code-confluence-commons']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ GITHUB.HEAD_REF }}

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: uv sync
      - name: Build package
        working-directory: ${{ matrix.path }}
        run: uv build
        
  test-uv-projects:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['unoplat-code-confluence-ingestion/code-confluence-flow-bridge']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ GITHUB.HEAD_REF }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # 1) Always ensure the Compose v2 plugin is present
      - name: Set up Docker Compose (v2)
        uses: docker/setup-compose-action@v1
        # pin a version if you need repeatability:
        # with:
        #   version: '2.37.0'

      # 2) Drop in a shim so legacy tools that expect `docker-compose`
      #    still work (but use v2 under the hood)
      - name: Provide docker-compose wrapper for compatibility
        shell: bash
        run: |
          if ! command -v docker-compose >/dev/null; then
            echo 'Creating docker-compose wrapper âžœ docker compose "$@"'
            sudo install -d /usr/local/bin
            printf '#!/usr/bin/env bash\nexec docker compose "$@"\n' | \
              sudo tee /usr/local/bin/docker-compose >/dev/null
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          docker compose version
          docker-compose version   # should output the same version

      - name: Install Ruff
        run: curl -LsSf https://astral.sh/ruff/install.sh | sh
        
      - name: Install dependencies and run tests
        working-directory: ${{ matrix.project }}
        env:
          GITHUB_PAT_TOKEN: ${{ github.token }} 
        run: |
          uv sync --group test
          uv run --group test pytest --cov=src/code_confluence_flow_bridge --cov-report=html:coverage_reports --cov-report=xml:coverage.xml --cov-report=term-missing tests/ -v

      - name: Set sanitized project name
        id: sanitize
        run: |
          # Replace slashes with hyphens and set as output
          SANITIZED_NAME=$(echo "${{ matrix.project }}" | tr '/' '-')
          echo "project_name=$SANITIZED_NAME" >> $GITHUB_OUTPUT

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ steps.sanitize.outputs.project_name }}
          path: |
            ${{ matrix.project }}/coverage_reports/
          retention-days: 7
    
